}
set.seed(123)
Data_used <- Aggregate_Data_Use
# Identify the total regions in the file
list_of_regions <- unique(Data_used$Region)
list_of_figures           <-list()  # Save the prediction for each region
list_of_relevant_var      <-list()  # Save selected variables
list_of_final_prediction  <-list()
info_df <- data.frame()
list_of_metrics_by_region <- data.frame()
for(region in list_of_regions){
tryCatch({
# Decide if you want to add hyper parameter tuning or cross validation
# to the model fit
hyper_tune <- TRUE
cv         <- TRUE
results_region <- get_results(region, "Region", Data_used,
hyper_tune, cv, Outcome_name)
# general info
cat(paste(length(colnames(info_df)), "\n"))
cat(paste(length(colnames(results_region$info_df_)), "\n"))
info_df <- rbind(info_df, results_region$info_df_)
cat("Rbind done \n")
#figures
list_of_figures[[region]] <- results_region$figure_[[1]]
#save metrics
final_metrics = results_region$metrics_
final_metrics$region = region
cat(paste(length(colnames(list_of_metrics_by_region)), "\n"))
cat(paste(length(colnames(final_metrics)), "\n"))
list_of_metrics_by_region<-rbind(list_of_metrics_by_region,
final_metrics)
cat("Rbind 2 done \n")
#save predictions to plot later
list_of_final_prediction[[region]]<-results_region$figure_[[2]]
}, error = function(err){
cat(paste("Error computing results for", region, err, "\n"))
})
}
# Create a list of plots using your figures
plot_list <- lapply(names(list_of_figures), function(obj_name) {
figure  <- list_of_figures[[obj_name]]
# Add the title equal to the object's name
figure +
theme_bw() +
labs(x = "", y = "", subtitle = obj_name)
})
# Ubication: Two values: Continent, Island
ncol_ = 1
nrow_ = 2
# Region: 4 values: Center, Island, North and South
if(region_column =='Region'){
ncol_ = 2
}
# SubRegion: 8 values: Southern Cone, ... Mexico
if(region_column =='SubRegion'){
ncol_ = 3
nrow_ = 3
}
# Arrange the plots in a grid using plot_grid
grid_plot <- plot_grid(plotlist=plot_list, nrow=nrow_ , ncol=ncol_)
# Display the grid of figures
figure <- grid_plot
ggsave(paste("./Figures/Region_Results/All_Predictions",
Outcome_name, region_column, value_col_to_use,
today, ".pdf", sep="_"),
figure, width = 15, height = 20)
result_list <- list(
"Model_Info"=info_df,
"Metrics"   =list_of_metrics_by_region)
write.xlsx(result_list, paste("./Figures/Region_Results/Relevant_var",
Outcome_name,
region_column,
value_col_to_use,
today,
".xlsx", sep="_"))
write.xlsx(list_of_final_prediction,
paste("./Figures/Region_Results/Final_predictions",
Outcome_name,
region_column,
value_col_to_use,
today,
".xlsx", sep="_"))
}
}
library(openxlsx)
library(readxl)
library(tidyverse)
library(ggplot2)
library(gridExtra)
library(randomForest)
library(glmnet)
library(cowplot)
library(Boruta) #Feature selection
library(boot)
library(xgboost)
library(grid)
library(IRdisplay)
library(cowplot)
library(boot)
library(caret)
library(mboost)
library(ranger)
library(gam)
# === Import Functions ==================== #
# Models
source("Functions/Modeling/RandomForest.R")
source("Functions/Modeling/Lasso.R")
source("Functions/Modeling/XGBoost.R")
source("Functions/Modeling/Boost_glm.R")
source("Functions/Modeling/Boost_gam.R")
source("Functions/Modeling/RFRanger.R")
#source("Functions/Modeling/gamSpline.R")
# Metrics Estimation MAE and RMED
source("Functions/Results/Est_Metrics.R")
# Confident Intervals
source("Functions/Results/ConfidentIntervalGeneral.R")
# Plot Results
source("Functions/Results/PlotResultsGeneral.R")
# Get All Results
source("Functions/Results/GetResultsGeneral.R")
# === Import Functions ==================== #
# Models
source("Functions/Modeling/RandomForest.R")
source("Functions/Modeling/Lasso.R")
source("Functions/Modeling/XGBoost.R")
source("Functions/Modeling/Boost_glm.R")
source("Functions/Modeling/Boost_gam.R")
source("Functions/Modeling/RFRanger.R")
#source("Functions/Modeling/gamSpline.R")
# Metrics Estimation MAE and RMED
source("Functions/Results/Est_Metrics.R")
# Confident Intervals
source("Functions/Results/ConfidentIntervalGeneral.R")
# Plot Results
source("Functions/Results/PlotResultsGeneral.R")
# Get All Results
source("Functions/Results/GetResultsGeneral.R")
today <- Sys.Date()
value_col_to_use <- "WeightedValue" # MedianValue, MeanValue
indicators <- c("CovIndex", "SUICM")
region_cols <- c("Ubication", "SubRegion")
for (region_column in region_cols) {
for (Outcome_name in indicators) {
cat(paste("Model creation for ", region_column, " and ", Outcome_name, "\n"))
Aggregate_Data_Use <- as.data.frame(
read.xlsx(paste("./Imputed_Data/Aggregate_Data_",
region_column, ".xlsx", sep="")))
Aggregate_Data_Use <- Aggregate_Data_Use[,
c("Year", "Region",
"Indicator", value_col_to_use)]
colnames(Aggregate_Data_Use) <-c("Year", "Region",
"Indicator", "Value")
Aggregate_Data_Use$Indicator[
which(Aggregate_Data_Use$Indicator== Outcome_name)] <- "Outcome"
if (Outcome_name == "CovIndex"){
ind_suicf <- which(Aggregate_Data_Use$Indicator=="SUICF")
ind_suicm <- which(Aggregate_Data_Use$Indicator=="SUICM")
Aggregate_Data_Use <-Aggregate_Data_Use[-c(ind_suicf,ind_suicm),]
}else{
ind_CovIndex <-which(Aggregate_Data_Use$Indicator=="CovIndex")
ind_dma <- which(Aggregate_Data_Use$Country=="DMA"|Aggregate_Data_Use$Country=="KNA")
if (Outcome_name=="SUICF"){
ind_suic <- which(Aggregate_Data_Use$Indicator=="SUICM")
}else{
ind_suic <- which(Aggregate_Data_Use$Indicator=="SUICF")}
Aggregate_Data_Use <- Aggregate_Data_Use[-c(ind_suic,ind_dma,ind_CovIndex),]
}
set.seed(123)
Data_used <- Aggregate_Data_Use
# Identify the total regions in the file
list_of_regions <- unique(Data_used$Region)
list_of_figures           <-list()  # Save the prediction for each region
list_of_relevant_var      <-list()  # Save selected variables
list_of_final_prediction  <-list()
info_df <- data.frame()
list_of_metrics_by_region <- data.frame()
for(region in list_of_regions){
tryCatch({
# Decide if you want to add hyper parameter tuning or cross validation
# to the model fit
hyper_tune <- TRUE
cv         <- TRUE
results_region <- get_results(region, "Region", Data_used,
hyper_tune, cv, Outcome_name)
# general info
info_df <- rbind(info_df, results_region$info_df_)
#figures
list_of_figures[[region]] <- results_region$figure_[[1]]
#save metrics
final_metrics = results_region$metrics_
final_metrics$region = region
list_of_metrics_by_region<-rbind(list_of_metrics_by_region,
final_metrics)
#save predictions to plot later
list_of_final_prediction[[region]]<-results_region$figure_[[2]]
}, error = function(err){
cat(paste("Error computing results for", region, err, "\n"))
})
}
# Create a list of plots using your figures
plot_list <- lapply(names(list_of_figures), function(obj_name) {
figure  <- list_of_figures[[obj_name]]
# Add the title equal to the object's name
figure +
theme_bw() +
labs(x = "", y = "", subtitle = obj_name)
})
# Ubication: Two values: Continent, Island
ncol_ = 1
nrow_ = 2
# Region: 4 values: Center, Island, North and South
if(region_column =='Region'){
ncol_ = 2
}
# SubRegion: 8 values: Southern Cone, ... Mexico
if(region_column =='SubRegion'){
ncol_ = 3
nrow_ = 3
}
# Arrange the plots in a grid using plot_grid
grid_plot <- plot_grid(plotlist=plot_list, nrow=nrow_ , ncol=ncol_)
# Display the grid of figures
figure <- grid_plot
ggsave(paste("./Figures/Region_Results/All_Predictions",
Outcome_name, region_column, value_col_to_use,
today, ".pdf", sep="_"),
figure, width = 15, height = 20)
result_list <- list(
"Model_Info"=info_df,
"Metrics"   =list_of_metrics_by_region)
write.xlsx(result_list, paste("./Figures/Region_Results/Relevant_var",
Outcome_name,
region_column,
value_col_to_use,
today,
".xlsx", sep="_"))
write.xlsx(list_of_final_prediction,
paste("./Figures/Region_Results/Final_predictions",
Outcome_name,
region_column,
value_col_to_use,
today,
".xlsx", sep="_"))
}
}
# === Import Functions ==================== #
# Models
source("Functions/Modeling/RandomForest.R")
source("Functions/Modeling/Lasso.R")
source("Functions/Modeling/XGBoost.R")
source("Functions/Modeling/Boost_glm.R")
source("Functions/Modeling/Boost_gam.R")
source("Functions/Modeling/RFRanger.R")
#source("Functions/Modeling/gamSpline.R")
# Metrics Estimation MAE and RMED
source("Functions/Results/Est_Metrics.R")
# Confident Intervals
source("Functions/Results/ConfidentIntervalGeneral.R")
# Plot Results
source("Functions/Results/PlotResultsGeneral.R")
# Get All Results
source("Functions/Results/GetResultsGeneral.R")
# === Import Functions ==================== #
# Models
source("Functions/Modeling/RandomForest.R")
source("Functions/Modeling/Lasso.R")
source("Functions/Modeling/XGBoost.R")
source("Functions/Modeling/Boost_glm.R")
source("Functions/Modeling/Boost_gam.R")
source("Functions/Modeling/RFRanger.R")
#source("Functions/Modeling/gamSpline.R")
# Metrics Estimation MAE and RMED
source("Functions/Results/Est_Metrics.R")
# Confident Intervals
source("Functions/Results/ConfidentIntervalGeneral.R")
# Plot Results
source("Functions/Results/PlotResultsGeneral.R")
# Get All Results
source("Functions/Results/GetResultsGeneral.R")
today <- Sys.Date()
value_col_to_use <- "WeightedValue" # MedianValue, MeanValue
indicators <- c("CovIndex", "SUICM")
region_cols <- c("Ubication", "SubRegion")
for (region_column in region_cols) {
for (Outcome_name in indicators) {
cat(paste("Model creation for ", region_column, " and ", Outcome_name, "\n"))
Aggregate_Data_Use <- as.data.frame(
read.xlsx(paste("./Imputed_Data/Aggregate_Data_",
region_column, ".xlsx", sep="")))
Aggregate_Data_Use <- Aggregate_Data_Use[,
c("Year", "Region",
"Indicator", value_col_to_use)]
colnames(Aggregate_Data_Use) <-c("Year", "Region",
"Indicator", "Value")
Aggregate_Data_Use$Indicator[
which(Aggregate_Data_Use$Indicator== Outcome_name)] <- "Outcome"
if (Outcome_name == "CovIndex"){
ind_suicf <- which(Aggregate_Data_Use$Indicator=="SUICF")
ind_suicm <- which(Aggregate_Data_Use$Indicator=="SUICM")
Aggregate_Data_Use <-Aggregate_Data_Use[-c(ind_suicf,ind_suicm),]
}else{
ind_CovIndex <-which(Aggregate_Data_Use$Indicator=="CovIndex")
ind_dma <- which(Aggregate_Data_Use$Country=="DMA"|Aggregate_Data_Use$Country=="KNA")
if (Outcome_name=="SUICF"){
ind_suic <- which(Aggregate_Data_Use$Indicator=="SUICM")
}else{
ind_suic <- which(Aggregate_Data_Use$Indicator=="SUICF")}
Aggregate_Data_Use <- Aggregate_Data_Use[-c(ind_suic,ind_dma,ind_CovIndex),]
}
set.seed(123)
Data_used <- Aggregate_Data_Use
# Identify the total regions in the file
list_of_regions <- unique(Data_used$Region)
list_of_figures           <-list()  # Save the prediction for each region
list_of_relevant_var      <-list()  # Save selected variables
list_of_final_prediction  <-list()
info_df <- data.frame()
list_of_metrics_by_region <- data.frame()
for(region in list_of_regions){
tryCatch({
# Decide if you want to add hyper parameter tuning or cross validation
# to the model fit
hyper_tune <- TRUE
cv         <- TRUE
results_region <- get_results(region, "Region", Data_used,
hyper_tune, cv, Outcome_name)
# general info
info_df <- rbind(info_df, results_region$info_df_)
#figures
list_of_figures[[region]] <- results_region$figure_[[1]]
#save metrics
final_metrics = results_region$metrics_
final_metrics$region = region
list_of_metrics_by_region<-rbind(list_of_metrics_by_region,
final_metrics)
#save predictions to plot later
list_of_final_prediction[[region]]<-results_region$figure_[[2]]
}, error = function(err){
cat(paste("Error computing results for", region, err, "\n"))
})
}
# Create a list of plots using your figures
plot_list <- lapply(names(list_of_figures), function(obj_name) {
figure  <- list_of_figures[[obj_name]]
# Add the title equal to the object's name
figure +
theme_bw() +
labs(x = "", y = "", subtitle = obj_name)
})
# Ubication: Two values: Continent, Island
ncol_ = 1
nrow_ = 2
# Region: 4 values: Center, Island, North and South
if(region_column =='Region'){
ncol_ = 2
}
# SubRegion: 8 values: Southern Cone, ... Mexico
if(region_column =='SubRegion'){
ncol_ = 3
nrow_ = 3
}
# Arrange the plots in a grid using plot_grid
grid_plot <- plot_grid(plotlist=plot_list, nrow=nrow_ , ncol=ncol_)
# Display the grid of figures
figure <- grid_plot
ggsave(paste("./Figures/Region_Results/All_Predictions",
Outcome_name, region_column, value_col_to_use,
today, ".pdf", sep="_"),
figure, width = 15, height = 20)
result_list <- list(
"Model_Info"=info_df,
"Metrics"   =list_of_metrics_by_region)
write.xlsx(result_list, paste("./Figures/Region_Results/Relevant_var",
Outcome_name,
region_column,
value_col_to_use,
today,
".xlsx", sep="_"))
write.xlsx(list_of_final_prediction,
paste("./Figures/Region_Results/Final_predictions",
Outcome_name,
region_column,
value_col_to_use,
today,
".xlsx", sep="_"))
}
}
knitr::opts_chunk$set(echo = TRUE)
library(openxlsx)
library(readxl)
library(tidyverse)
library(ggplot2)
library(gridExtra)
library(randomForest)
library(glmnet)
library(cowplot)
library(Boruta) #Feature selection
library(boot)
library(xgboost)
library(grid)
library(IRdisplay)
library(cowplot)
library(boot)
library(caret)
library(mboost)
library(ranger)
library(gam)
# === Import Functions ==================== #
# Models
source("Functions/Modeling/RandomForest.R")
source("Functions/Modeling/Lasso.R")
source("Functions/Modeling/XGBoost.R")
source("Functions/Modeling/Boost_glm.R")
source("Functions/Modeling/Boost_gam.R")
source("Functions/Modeling/RFRanger.R")
#source("Functions/Modeling/gamSpline.R")
# Metrics Estimation MAE and RMED
source("Functions/Results/Est_Metrics.R")
# Confident Intervals
source("Functions/Results/ConfidentIntervalGeneral.R")
# Plot Results
source("Functions/Results/PlotResultsGeneral.R")
# Get All Results
source("Functions/Results/GetResultsGeneral.R")
set.seed(123)
Outcome_names <- c("SUICM", "CovIndex")
for (Outcome_name in Outcome_names) {
cat("######################################################### \n")
cat("######################################################### \n")
cat(paste(Outcome_name, "Analysis \n"))
cat("######################################################### \n")
cat("######################################################### \n")
### Read Data ============================================= ###
Imputed_data<- as.data.frame(read.xlsx(
"./Imputed_data/Final_imputed_data_All.xlsx"))
Imputed_data$Indicator[
which(Imputed_data$Indicator== Outcome_name)] <- "Outcome"
if (Outcome_name == "CovIndex"){
ind_suicf <- which(Imputed_data$Indicator=="SUICF")
ind_suicm <- which(Imputed_data$Indicator=="SUICM")
Imputed_data <-Imputed_data[-c(ind_suicf,ind_suicm),]
}else{
ind_CovIndex <-which(Imputed_data$Indicator=="CovIndex")
ind_dma <- which(Imputed_data$Country=="DMA"|Imputed_data$Country=="KNA")
if (Outcome_name=="SUICF"){
ind_suic <- which(Imputed_data$Indicator=="SUICM")
}else{
ind_suic <- which(Imputed_data$Indicator=="SUICF")}
Imputed_data <- Imputed_data[-c(ind_suic,ind_dma,ind_CovIndex),]
}
ind_redundant<- which(Imputed_data$Indicator%in%c("COV16","COV17",
"COV18","COV19",
"COV20","HEALTH16"))
Imputed_data <- Imputed_data[-ind_redundant,]
### Fit Models ============================================= ###
# Data_used <- Imputed_data %>% filter(Country%in%c("BRA"))
Data_used <- Imputed_data
# Identify the total countries in the file
list_of_countries <- unique(Data_used$Country)
list_of_figures           <-list()  # Save the prediction for each country
list_of_relevant_var      <-list()  # Save selected variables
list_of_final_prediction  <-list()
info_df <- data.frame()
list_of_metrics_by_country <- data.frame()
for(country in list_of_countries){
tryCatch({
# Decide if you want to add hyper parameter tuning or
# cross validation to the model fit
hyper_tune <- TRUE
cv         <- TRUE
results_country <- get_results(country, "Country", Data_used,
hyper_tune, cv, Outcome_name)
#general info
info_df <- rbind(info_df, results_country$info_df_)
#figures
list_of_figures[[country]] <- results_country$figure_[[1]]
#save metrics
final_metrics = results_country$metrics_
final_metrics$Country = country
list_of_metrics_by_country<-rbind(list_of_metrics_by_country, final_metrics)
#save predictions to plot later
list_of_final_prediction[[country]]<-results_country$figure_[[2]]
}, error = function(err){
cat(paste("Error computing results for ", country, " ", err, "\n"))
})
}
### Write results ========================================== ###
today <- Sys.Date()
# Create a list of plots using your figures
plot_list <- lapply(names(list_of_figures), function(obj_name) {
figure  <- list_of_figures[[obj_name]]
# Add the title equal to the object's name
figure +
theme_bw() +
labs(x = "", y = "", subtitle = obj_name)
})
# Arrange the plots in a grid using plot_grid
grid_plot <- plot_grid(plotlist = plot_list, nrow = 9 , ncol = 4)
# Display the grid of figures
figure <- grid_plot
ggsave(paste("./Figures/Country_Results/All_Predictions_", today, "_",
Outcome_name, ".pdf",sep=""), figure, width = 15, height = 20)
result_list <- list(
"Model_Info"=info_df,
"Metrics"   =list_of_metrics_by_country)
write.xlsx(result_list, paste("./Figures/Country_Results/Relevant_var_", today, "_",
Outcome_name, ".xlsx", sep=""))
write.xlsx(list_of_final_prediction,
paste("./Figures/Country_Results/Final_predictions_", today, "_",
Outcome_name, ".xlsx", sep=""))
}
